@page "/hand-odds"

@using PokerEvalApi.Models;
@using System.ComponentModel.DataAnnotations
@using PokerEvalApi.Const;

<PageTitle>Hand odds</PageTitle>

<h1>Hand odds</h1>

<EditForm Model="Model" OnValidSubmit="Submit" FormName="HandOddsForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>
            Pocket1:
            <InputText @bind-Value="Model!.Pocket1" />
        </label>
    </div>
    <div>
        <label>
            Pocket2:
            <InputText @bind-Value="Model!.Pocket2" />
        </label>
    </div>
    <div>
        <label>
            Board:
            <InputText @bind-Value="Model!.Board" />
        </label>
    </div>
    <div>
        <button type="submit" disabled="@isCalculating">Calculate</button>
    </div>
</EditForm>

@if (isCalculating)
{
    <p><em>Calculating...</em></p>
}
@if (Item != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(PokerOddsResponseItem.Pocket)</th>
                <th>@nameof(PokerOddsResponseItem.WinRate)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Item.Pockets)
            {
                <tr>
                    <td>@item.Pocket</td>
                    <td>@item.WinRate.ToString("P2")</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <label>
            Board:
            @Item.Board
        </label>
    </div>
}

@code {
    [SupplyParameterFromForm]
    private HandOddsInputModel? Model { get; set; } = new();

    private PokerOddsResponse? Item { get; set; }

    private bool isCalculating = false;

    private async Task Submit()
    {
        if (Model == null) return;

        isCalculating = true;

        try
        {
            var request = new PokerOddsRequest()
            {
                Pockets = [
                    new() { Pocket = Model.Pocket1!  },
                    new() { Pocket = Model.Pocket2!  },
                ],
                Board = Model.Board,
            };

            Item = await Task.Run(() =>
            {
                return Utils.HandOddsUtils.CalculateHandOdds(request);
            });
        }
        finally
        {
            isCalculating = false;
        }
    }

    public class HandOddsInputModel
    {
        [RegularExpression(Patterns.BoardPattern)]
        public string? Board { get; set; }

        [Required]
        [RegularExpression(Patterns.PocketPattern)]
        public string Pocket1 { get; set; } = "AsAh";

        [Required]
        [RegularExpression(Patterns.PocketPattern)]
        public string Pocket2 { get; set; } = "7d2c";
    }

    public class HandOddsOutputModel : HandOddsInputModel
    {
        public double? Player1WinRates { get; set; }

        public double? Player2WinRates { get; set; }
    }
}
